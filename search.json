[{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to Logger","title":"Contributing to Logger","text":"Thank interest contributing Logger!","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to Logger","text":"Please read adhere Code Conduct.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to Contribute","title":"Contributing to Logger","text":"Use clear, descriptive title. Provide detailed steps reproduce implement. Fill PR template. Include tests documentation. Improve documentation submitting PRs clarifications additions.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development Guidelines","title":"Contributing to Logger","text":"Use 4 spaces indentation. Use box imports. Prefer base R functions avoid unnecessary dependencies. aim minimise external dependencies, including tidyverse packages. Write clear, efficient, maintainable code. Example:","code":"box::use(     Logger[Logger, LogLevel] )  log_message <- function(message, level = LogLevel$INFO) {     logger <- Logger$new()     logger$log(level, message) }"},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"commit-messages","dir":"","previous_headings":"","what":"Commit Messages","title":"Contributing to Logger","text":"Use present tense (“Add feature”, “Added feature”) concise descriptive","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"need-help","dir":"","previous_headings":"","what":"Need Help?","title":"Contributing to Logger","text":"Check issues labeled good first issue help wanted. Thank contributing Logger!","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/donate.html","id":"support-my-work","dir":"Articles","previous_headings":"","what":"Support my work","title":"Donate","text":"find package useful, please consider supporting work cryptocurrency donation.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/donate.html","id":"bitcoin","dir":"Articles","previous_headings":"Support my work","what":"Bitcoin","title":"Donate","text":"bc1qgs4f6hhnzj8m2j05axgsf53k67kugps92qzr2k Copy","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/donate.html","id":"monero","dir":"Articles","previous_headings":"Support my work","what":"Monero","title":"Donate","text":"41wSUfpnhVUW5GnTKCyBBwVuokhkjMeepAVkKT1qv3HDhcZhTSQx1UaTaibEukndQrCPLVMcRt1LVFpVSq3YrdRjENBtMkG Copy","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with Logger","text":"Logger package provides flexible powerful logging system R applications. includes Logger class creating customisable loggers, well helper functions debugging error reporting. vignette guide basics using Logger package demonstrate leverage features improve R workflows.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting started with Logger","text":"can install Logger package GitHub :","code":"remotes::install_github(\"dereckmezquita/stenographer\")"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Getting started with Logger","text":"First, let’s load package create basic logger:","code":"box::use(Logger[Logger, LogLevel, messageParallel])  # Create a basic logger log <- Logger$new()  # Log some messages log$info(\"This is an informational message\") #> 2025-01-12T16:28:45.143Z INFO    This is an informational message log$warn(\"This is a warning\") #> 2025-01-12T16:28:45.147Z WARNING This is a warning log$error(\"This is an error\") #> 2025-01-12T16:28:45.183Z ERROR   This is an error"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"customising-the-logger","dir":"Articles","previous_headings":"","what":"Customising the Logger","title":"Getting started with Logger","text":"can customise logger specifying minimum log level, output file, custom print function:","code":"# Create a custom logger custom_log <- Logger$new(     level = LogLevel$WARNING,     file_path = \"app.log\",     print_fn = message )  custom_log$info(\"This won't be logged\") custom_log$warn(\"This will be logged to console and file\") #> 2025-01-12T16:28:45.379Z WARNING This will be logged to console and file custom_log$error(\"This is an error message\") #> 2025-01-12T16:28:45.381Z ERROR   This is an error message"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"logging-to-a-database","dir":"Articles","previous_headings":"","what":"Logging to a Database","title":"Getting started with Logger","text":"Logger class supports logging SQLite database. ’s can set :","code":"box::use(RSQLite[ SQLite ]) box::use(DBI[ dbConnect, dbDisconnect, dbGetQuery ])  # Create a database connection db <- dbConnect(SQLite(), \"log.sqlite\")  # Create a logger that logs to the database db_log <- Logger$new(     db_conn = db,     table_name = \"app_logs\" )  # Log some messages db_log$info(\"This is logged to the database\") #> 2025-01-12T16:28:45.647Z INFO    This is logged to the database db_log$warn(\"This is a warning\", data = list(code = 101)) #> 2025-01-12T16:28:45.658Z WARNING This is a warning #> Data: #> { #>   \"code\": 101 #> } db_log$error(\"An error occurred\", error = \"Division by zero\") #> 2025-01-12T16:28:45.761Z ERROR   An error occurred #> Error: #> \"Division by zero\"  # Example of querying the logs query <- \"SELECT * FROM app_logs WHERE level = 'ERROR'\" result <- dbGetQuery(db, query) print(result) #>   id                 datetime level context               msg data #> 1  3 2025-01-12T16:28:45.761Z ERROR    <NA> An error occurred <NA> #>                          error #> 1 [\"[\\\\\"Division by zero\\\\\"]\"]"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"using-context","dir":"Articles","previous_headings":"","what":"Using Context","title":"Getting started with Logger","text":"Logger class now supports context feature, allows add persistent information log entries:","code":"context_log <- Logger$new(     db_conn = db,     table_name = \"context_logs\",     context = list(app_name = \"MyApp\", version = \"1.0.0\") )  context_log$info(\"Application started\") #> 2025-01-12T16:28:45.844Z INFO    Application started #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"version\": \"1.0.0\" #> }  # Update context context_log$update_context(list(user_id = \"12345\")) context_log$info(\"User logged in\") #> 2025-01-12T16:28:45.854Z INFO    User logged in #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"version\": \"1.0.0\", #>   \"user_id\": \"12345\" #> }  # Log an error with context context_log$error(\"Operation failed\", data = list(operation = \"data_fetch\")) #> 2025-01-12T16:28:45.865Z ERROR   Operation failed #> Data: #> { #>   \"operation\": \"data_fetch\" #> } #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"version\": \"1.0.0\", #>   \"user_id\": \"12345\" #> }  # Example of querying logs with context query <- \"SELECT * FROM context_logs WHERE json_extract(context, '$.user_id') = '12345'\" result <- dbGetQuery(db, query) print(result) #> [1] id       datetime level    context  msg      data     error    #> <0 rows> (or 0-length row.names)  # Clear context context_log$clear_context() context_log$info(\"Context cleared\") #> 2025-01-12T16:28:45.878Z INFO    Context cleared"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"combining-features","dir":"Articles","previous_headings":"","what":"Combining Features","title":"Getting started with Logger","text":"can combine various features Logger class create powerful logging system:","code":"# Create a combined logger combined_log <- Logger$new(     level = LogLevel$INFO,     file_path = \"combined_app.log\",     db_conn = db,     table_name = \"combined_logs\",     context = list(app_name = \"CombinedApp\", version = \"2.0.0\"),     print_fn = messageParallel,     format_fn = function(level, msg) {         # manipulate the message before logging         msg <- gsub(\"API_KEY=[^\\\\s]+\", \"API_KEY=***\", msg)         return(paste(level, msg))     } )  # Log some messages combined_log$info(\"Application started\") combined_log$warn(\"Low memory\", data = list(available_mb = 100)) combined_log$error(\"Database connection failed\", error = \"Connection timeout\")  # Update context combined_log$update_context(list(user_id = \"67890\")) combined_log$info(\"User action\", data = list(action = \"button_click\"))  # Example of a more complex query using context and data query <- \" SELECT * FROM combined_logs WHERE json_extract(context, '$.app_name') = 'CombinedApp'   AND json_extract(data, '$.available_mb') < 200 \" result <- dbGetQuery(db, query) print(result) #> [1] id       datetime level    context  msg      data     error    #> <0 rows> (or 0-length row.names)  # Don't forget to close the database connection when you're done dbDisconnect(db)"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"using-helper-functions","dir":"Articles","previous_headings":"","what":"Using Helper Functions","title":"Getting started with Logger","text":"Logger package includes several helper functions can used conjunction Logger class provide detailed information logs. Let’s explore use functions effectively.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"finding-and-logging-data-issues","dir":"Articles","previous_headings":"Using Helper Functions","what":"Finding and Logging Data Issues","title":"Getting started with Logger","text":"Suppose dataset problematic values, want log issues occur. can use valueCoordinates function locate problematic values include information log messages. produce log entry like:","code":"box::use(Logger[valueCoordinates])  # Create a sample dataset with some issues df <- data.frame(     a = c(1, NA, 3, 4, 5),     b = c(2, 4, NA, 8, 10),     c = c(3, 6, 9, NA, 15) )  # Create a logger log <- Logger$new()  # Find coordinates of NA values na_coords <- valueCoordinates(df)  if (nrow(na_coords) > 0) {     log$warn(         \"NA values found in the dataset\",         data = list(             na_locations = na_coords         )     ) } #> 2025-01-12T16:28:46.089Z WARNING NA values found in the dataset #> Data: #> { #>   \"na_locations\": [ #>     { #>       \"column\": 1, #>       \"row\": 2 #>     }, #>     { #>       \"column\": 2, #>       \"row\": 3 #>     }, #>     { #>       \"column\": 3, #>       \"row\": 4 #>     } #>   ] #> }"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"logging-errors-with-context","dir":"Articles","previous_headings":"Using Helper Functions","what":"Logging Errors with Context","title":"Getting started with Logger","text":"error occurs, ’s often useful catch log just error message, also context error occurred. ’s example using Logger class helper functions:","code":"box::use(Logger[tableToString])  log <- Logger$new()  process_data <- function(df) {     tryCatch({         result <- df$a / df$b         if (any(is.infinite(result))) {             inf_coords <- valueCoordinates(data.frame(result), Inf)             log$error(                 \"Division by zero occurred\",                 data = list(                     infinite_values = inf_coords,                     dataset_preview = tableToString(df)                 )             )             cat(\"Division by zero error\")         }         return(result)     }, error = function(e) {         log$error(             paste(\"An error occurred while processing data:\", e$message),             data = list(dataset_preview = tableToString(df)),             error = e         )         cat(e)     }) }  # Test the function with problematic data df <- data.frame(a = c(1, 2, 3), b = c(0, 2, 0)) process_data(df) #> 2025-01-12T16:28:46.189Z ERROR   Division by zero occurred #> Data: #> { #>   \"infinite_values\": [ #>     { #>       \"column\": 1, #>       \"row\": 1 #>     }, #>     { #>       \"column\": 1, #>       \"row\": 3 #>     } #>   ], #>   \"dataset_preview\": \"  a b\\n1 1 0\\n2 2 2\\n3 3 0\" #> }  #> Division by zero error #> [1] Inf   1 Inf"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"logging-in-parallel-environments","dir":"Articles","previous_headings":"","what":"Logging in Parallel Environments","title":"Getting started with Logger","text":"working parallel processing, standard logging functions might work expected. Logger package provides messageParallel function ensure messages properly logged parallel processes: ensures messages parallel processes properly captured logged.","code":"box::use(future) box::use(future.apply[future_lapply])  log <- Logger$new(print_fn = messageParallel)  future::plan(future::multisession, workers = 2)  result <- future_lapply(1:5, function(i) {     messageParallel(sprintf(\"Processing item %d\", i))     if (i == 3) {         log$warn(sprintf(\"Warning for item %d\", i))     }     return(i * 2) })  future::plan(future::sequential)"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-Logger.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting started with Logger","text":"Logger package provides robust flexible logging system R applications. features like file logging, database logging, context management, can create informative context-rich log messages greatly aid debugging monitoring R scripts applications. Moreover, using helper functions like valueCoordinates tableToString can easily track log data issues errors, providing valuable information troubleshooting analysis. Remember adjust log level, output file, database settings, parameters suit specific needs. ability query logs using SQL, especially context-based filtering, makes easy analyze troubleshoot issues applications.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dereck Mezquita. Author, maintainer.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mezquita D (2025). Logger: Flexible Customisable Logging System R. R package version 0.0.32, https://github.com/dereckmezquita/stenographer.","code":"@Manual{,   title = {Logger: Flexible and Customisable Logging System for R},   author = {Dereck Mezquita},   year = {2025},   note = {R package version 0.0.32},   url = {https://github.com/dereckmezquita/stenographer}, }"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"logger-","dir":"","previous_headings":"","what":"Flexible and Customisable Logging System for R","title":"Flexible and Customisable Logging System for R","text":"Logger flexible powerful logging system R applications. provides Logger class creating customisable loggers, well helper functions debugging error reporting. latest version includes support SQLite database logging context management.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Flexible and Customisable Logging System for R","text":"can install Logger GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"dereckmezquita/stenographer\")"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Flexible and Customisable Logging System for R","text":"’s quick example use Logger:","code":"box::use(Logger[Logger, LogLevel])  # Create a basic logger log <- Logger$new()  # Log some messages log$info(\"This is an informational message\") #> 2024-08-18T18:57:50.871Z INFO    This is an informational message log$warn(\"This is a warning\") #> 2024-08-18T18:57:50.884Z WARNING This is a warning log$error(\"This is an error\") #> 2024-08-18T18:57:50.921Z ERROR   This is an error"},{"path":[]},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"customisable-logging","dir":"","previous_headings":"Features","what":"Customisable Logging","title":"Flexible and Customisable Logging System for R","text":"can customise logger specifying minimum log level, output file, custom print function: Logs written specified file JSON objects:","code":"log_file <- tempfile(\"app_log\")  custom_log <- Logger$new(     level = LogLevel$WARNING,     file_path = log_file,     print_fn = message )  custom_log$info(\"This won't be logged\") custom_log$warn(\"This will be logged to console and file\") #> 2024-08-18T18:57:51.208Z WARNING This will be logged to console and file custom_log$error(\"This is an error message\", error = \"Some error\") #> 2024-08-18T18:57:51.226Z ERROR   This is an error message #> Error: #> \"Some error\" cat(readLines(log_file), sep = \"\\n\") #> {\"datetime\":\"2024-08-18T18:57:51.208Z\",\"level\":\"WARNING\",\"msg\":\"This will be logged to console and file\",\"data\":{},\"error\":{},\"context\":{}}  #> {\"datetime\":\"2024-08-18T18:57:51.226Z\",\"level\":\"ERROR\",\"msg\":\"This is an error message\",\"data\":{},\"error\":\"[\\\"Some error\\\"]\",\"context\":{}}"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"database-logging","dir":"","previous_headings":"Features","what":"Database Logging","title":"Flexible and Customisable Logging System for R","text":"Logger now supports logging SQLite database context management can easily track application events. context useful filtering querying logs based specific criteria SQLite:","code":"box::use(RSQLite[ SQLite ]) box::use(DBI[ dbConnect, dbDisconnect, dbGetQuery ])  # Create a database connection db <- dbConnect(SQLite(), \"log.sqlite\")  # Create a logger that logs to the database db_log <- Logger$new(     context = list(app_name = \"MyApp\", fun = \"main\"),     db_conn = db,     table_name = \"app_logs\" )  # Log some messages db_log$info(\"This is logged to the database\") #> 2024-08-18T18:57:51.625Z INFO    This is logged to the database #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"fun\": \"main\" #> } db_log$warn(\"This is a warning\", data = list(code = 101)) #> 2024-08-18T18:57:51.701Z WARNING This is a warning #> Data: #> { #>   \"code\": 101 #> } #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"fun\": \"main\" #> } db_log$error(\"An error occurred\", error = \"Division by zero\") #> 2024-08-18T18:57:51.739Z ERROR   An error occurred #> Error: #> \"Division by zero\" #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"fun\": \"main\" #> }  # Example of querying the logs query <- \"SELECT * FROM app_logs WHERE level = 'ERROR'\" result <- dbGetQuery(db, query) print(result) #>   id                 datetime level                               context #> 1  3 2024-08-18T18:20:15.806Z ERROR {\"app_name\":[\"MyApp\"],\"fun\":[\"main\"]} #> 2  6 2024-08-18T18:57:51.739Z ERROR {\"app_name\":[\"MyApp\"],\"fun\":[\"main\"]} #>                 msg data                        error #> 1 An error occurred <NA> [\"[\\\\\"Division by zero\\\\\"]\"] #> 2 An error occurred <NA> [\"[\\\\\"Division by zero\\\\\"]\"]  # Don't forget to close the database connection when you're done dbDisconnect(db)"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"helper-functions","dir":"","previous_headings":"Features","what":"Helper Functions","title":"Flexible and Customisable Logging System for R","text":"Logger includes helper functions like valueCoordinates tableToString provide detailed context log messages:","code":"box::use(Logger[valueCoordinates, tableToString])  # Create a sample dataset with some issues df <- data.frame(     a = c(1, NA, 3, 4, 5),     b = c(2, 4, NA, 8, 10),     c = c(3, 6, 9, NA, 15) )  # Find coordinates of NA values na_coords <- valueCoordinates(df)  if (nrow(na_coords) > 0) {     log$warn(         \"NA values found in the dataset\",         data = list(             na_locations = na_coords,             dataset_preview = tableToString(df)         )     ) } #> 2024-08-18T18:57:51.762Z WARNING NA values found in the dataset #> Data: #> { #>   \"na_locations\": [ #>     { #>       \"column\": 1, #>       \"row\": 2 #>     }, #>     { #>       \"column\": 2, #>       \"row\": 3 #>     }, #>     { #>       \"column\": 3, #>       \"row\": 4 #>     } #>   ], #>   \"dataset_preview\": \"   a  b  c\\n1  1  2  3\\n2 NA  4  6\\n3  3 NA  9\\n4  4  8 NA\\n5  5 10 15\" #> }"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"error-logging-with-context","dir":"","previous_headings":"Features","what":"Error Logging with Context","title":"Flexible and Customisable Logging System for R","text":"Logger makes easy log errors context:","code":"process_data <- function(df) {     tryCatch({         result <- df$a / df$b         if (any(is.infinite(result))) {             inf_coords <- valueCoordinates(data.frame(result), Inf)             log$error(                 \"Division by zero occurred\",                 data = list(                     infinite_values = inf_coords,                     dataset_preview = tableToString(df)                 )             )             stop(\"Division by zero error\")         }         return(result)     }, error = function(e) {         log$error(             paste(\"An error occurred while processing data:\", e$message),             data = list(dataset_preview = tableToString(df)),             error = e         )         stop(e)     }) }  # Test the function with problematic data df <- data.frame(a = c(1, 2, 3), b = c(0, 2, 0)) process_data(df) #> 2024-08-18T18:57:51.801Z ERROR   Division by zero occurred #> Data: #> { #>   \"infinite_values\": [ #>     { #>       \"column\": 1, #>       \"row\": 1 #>     }, #>     { #>       \"column\": 1, #>       \"row\": 3 #>     } #>   ], #>   \"dataset_preview\": \"  a b\\n1 1 0\\n2 2 2\\n3 3 0\" #> }  #> 2024-08-18T18:57:51.803Z ERROR   An error occurred while processing data: Division by zero error #> Data: #> { #>   \"dataset_preview\": \"  a b\\n1 1 0\\n2 2 2\\n3 3 0\" #> } #> Error: #> { #>   \"name\": \"simpleError\", #>   \"message\": \"Division by zero error\", #>   \"call\": \"doTryCatch(return(expr), name, parentenv, handler)\" #> } #> Error in doTryCatch(return(expr), name, parentenv, handler): Division by zero error"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"parallel-processing-support","dir":"","previous_headings":"Features","what":"Parallel Processing Support","title":"Flexible and Customisable Logging System for R","text":"Logger provides support logging parallel environments:","code":"box::use(future) box::use(future.apply[future_lapply]) box::use(Logger[messageParallel])  log <- Logger$new(print_fn = messageParallel)  future::plan(future::multisession, workers = 2)  result <- future_lapply(1:5, function(i) {     messageParallel(sprintf(\"Processing item %d\", i))     if (i == 3) {         log$warn(sprintf(\"Warning for item %d\", i))     }     return(i * 2) })  future::plan(future::sequential) #> Processing item 1 #> Processing item 2 #> Processing item 3 #> 2024-08-03T11:18:03.091Z WARNING Warning for item 3 #> Processing item 4 #> Processing item 5"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Flexible and Customisable Logging System for R","text":"Contributions Logger welcome! Please refer CONTRIBUTING.md file guidelines.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Flexible and Customisable Logging System for R","text":"Logger released MIT License. See LICENSE file details.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/LogLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Levels — LogLevel","title":"Log Levels — LogLevel","text":"Defines available log levels Logger class.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/LogLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Levels — LogLevel","text":"","code":"LogLevel"},{"path":"https://dereckmezquita.github.io/stenographer/reference/LogLevel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Log Levels — LogLevel","text":"object class list length 3.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Logger — Logger","title":"Logger — Logger","text":"R6 class flexible logging customisable output, message formatting, context.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Logger — Logger","text":"Logger$new() Logger$set_level() Logger$update_context() Logger$clear_context() Logger$get_context() Logger$error() Logger$warn() Logger$info() Logger$clone()","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Logger — Logger","text":"Create new Logger object.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$new(   level = LogLevel$INFO,   file_path = NULL,   db_conn = NULL,   table_name = \"LOGS\",   print_fn = function(x) cat(x, \"\\n\"),   format_fn = function(level, msg) msg,   context = list() )"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger — Logger","text":"level minimum log level output. Default LogLevel$INFO. file_path Character; path file save log entries . Default NULL. db_conn DBI connection object; existing database connection. Default NULL. table_name Character; name table log database. Default \"LOGS\". print_fn Function; custom print function use console output. accept single character string input. Default uses cat newline. format_fn Function; custom format function modify log message. accept level msg inputs return formatted string. context List; initial context logger. Default empty list.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Logger — Logger","text":"new `Logger` object.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-set-level-","dir":"Reference","previous_headings":"","what":"Method set_level()","title":"Logger — Logger","text":"Set minimum log level.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$set_level(level)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger — Logger","text":"level new minimum log level set.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logger — Logger","text":"","code":"logger <- Logger$new() logger$set_level(LogLevel$WARNING)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-update-context-","dir":"Reference","previous_headings":"","what":"Method update_context()","title":"Logger — Logger","text":"Update logger's context","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$update_context(new_context)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger — Logger","text":"new_context list new context items add update","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-clear-context-","dir":"Reference","previous_headings":"","what":"Method clear_context()","title":"Logger — Logger","text":"Clear logger's context","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$clear_context()"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-get-context-","dir":"Reference","previous_headings":"","what":"Method get_context()","title":"Logger — Logger","text":"Get current context","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$get_context()"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-error-","dir":"Reference","previous_headings":"","what":"Method error()","title":"Logger — Logger","text":"Log error message.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$error(msg, data = NULL, error = NULL)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger — Logger","text":"msg Character; error message log. data Optional; additional data include log entry. error Optional; error object include log entry.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Logger — Logger","text":"","code":"logger <- Logger$new() logger$error(\"An error occurred\", data = list(x = 1), error = \"Oops!\")"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-warn-","dir":"Reference","previous_headings":"","what":"Method warn()","title":"Logger — Logger","text":"Log warning message.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$warn(msg, data = NULL)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger — Logger","text":"msg Character; warning message log. data Optional; additional data include log entry.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Logger — Logger","text":"","code":"logger <- Logger$new() logger$warn(\"This is a warning\", data = list(reason = \"example\"))"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-info-","dir":"Reference","previous_headings":"","what":"Method info()","title":"Logger — Logger","text":"Log info message.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$info(msg, data = NULL)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger — Logger","text":"msg Character; info message log. data Optional; additional data include log entry.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Logger — Logger","text":"","code":"logger <- Logger$new() logger$info(\"Operation completed successfully\", data = list(duration = 5.2))"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Logger — Logger","text":"objects class cloneable method.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger — Logger","text":"","code":"Logger$clone(deep = FALSE)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger — Logger","text":"deep Whether make deep clone.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logger — Logger","text":"","code":"# Create a basic logger logger <- Logger$new() logger$info(\"This is an info message\") #> 2025-01-12T16:28:40.901Z INFO    This is an info message  logger$warn(\"This is a warning\") #> 2025-01-12T16:28:40.905Z WARNING This is a warning  logger$error(\"This is an error\") #> 2025-01-12T16:28:40.928Z ERROR   This is an error   # Create a logger with custom settings, message formatting, and context custom_logger <- Logger$new(   level = LogLevel$WARNING,   file_path = tempfile(\"log_\"),   print_fn = function(x) message(paste0(\"Custom: \", x)),   format_fn = function(level, msg) paste0(\"Hello prefix: \", msg),   context = list(program = \"MyApp\") ) custom_logger$info(\"This won't be logged\") custom_logger$warn(\"This will be logged with a custom prefix\") #> Custom: 2025-01-12T16:28:40.932Z WARNING Hello prefix: This will be logged with a custom prefix #> Context: #> { #>   \"program\": \"MyApp\" #> }  # Change log level and update context custom_logger$set_level(LogLevel$INFO) custom_logger$update_context(list(user = \"John\")) custom_logger$info(\"Now this will be logged with a custom prefix and context\") #> Custom: 2025-01-12T16:28:40.935Z INFO    Hello prefix: Now this will be logged with a custom prefix and context #> Context: #> { #>   \"program\": \"MyApp\", #>   \"user\": \"John\" #> }  ## ------------------------------------------------ ## Method `Logger$set_level` ## ------------------------------------------------  logger <- Logger$new() logger$set_level(LogLevel$WARNING)  ## ------------------------------------------------ ## Method `Logger$error` ## ------------------------------------------------  logger <- Logger$new() logger$error(\"An error occurred\", data = list(x = 1), error = \"Oops!\") #> 2025-01-12T16:28:40.938Z ERROR   An error occurred #> Data: #> { #>   \"x\": 1 #> } #> Error: #> \"Oops!\"   ## ------------------------------------------------ ## Method `Logger$warn` ## ------------------------------------------------  logger <- Logger$new() logger$warn(\"This is a warning\", data = list(reason = \"example\")) #> 2025-01-12T16:28:40.942Z WARNING This is a warning #> Data: #> { #>   \"reason\": \"example\" #> }   ## ------------------------------------------------ ## Method `Logger$info` ## ------------------------------------------------  logger <- Logger$new() logger$info(\"Operation completed successfully\", data = list(duration = 5.2)) #> 2025-01-12T16:28:40.944Z INFO    Operation completed successfully #> Data: #> { #>   \"duration\": 5.2 #> }"},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate a vector of strings — collapse","title":"Concatenate a vector of strings — collapse","text":"Helper function pretty printing vectors. Avoids repetitive paste0 code. one element add separator end.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate a vector of strings — collapse","text":"","code":"collapse(vector, collapse = \" \")"},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate a vector of strings — collapse","text":"vector Character vector. collapse separator.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate a vector of strings — collapse","text":"character","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate a vector of strings — collapse","text":"","code":"collapse(letters, \", \") #> [1] \"a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\" collapse(letters[1], \", \") #> [1] \"a\""},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print from parallel forked processes — messageParallel","title":"Print from parallel forked processes — messageParallel","text":"Uses `sprintf` `C` function echo messages back R console parallel computation `future` `future.apply`.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print from parallel forked processes — messageParallel","text":"","code":"messageParallel(...)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print from parallel forked processes — messageParallel","text":"... Character vector messages print.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print from parallel forked processes — messageParallel","text":"Beware function may consume large amounts resources.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print from parallel forked processes — messageParallel","text":"","code":"messageParallel(\"Send this message back up.\")"},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame printout to a string — tableToString","title":"Convert a data.frame printout to a string — tableToString","text":"function captures output printing object data.frame returns single string. particularly useful including tabular data error messages log entries strings.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame printout to a string — tableToString","text":"","code":"tableToString(obj)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame printout to a string — tableToString","text":"obj R object printed captured.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data.frame printout to a string — tableToString","text":"Character string","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a data.frame printout to a string — tableToString","text":"function performs following steps: 1. Converts input object data frame using `.data.frame()`. 2. Prints resulting data.frame. 3. Captures print output using `capture.output()`. 4. Collapses captured output single string newline characters. function particularly useful need include contents table data frame single string, throwing error message creating log entry. allows easily combine textual information tabular data format can printed cohesive message.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame printout to a string — tableToString","text":"","code":"# Create a sample data frame df <- data.frame(a = 1:3, b = letters[1:3])  # Use tableToString to get the output as a string output <- tableToString(df) cat(output) #>   a b #> 1 1 a #> 2 2 b #> 3 3 c  # Example of using tableToString in error handling tryCatch({     # Some operation that might fail     if (sum(df$a) > 5) {         stop(             paste(\"Sum of column 'a' is too high. Current data:\",             tableToString(df))         )   } }, error = function(e) {     message(\"An error occurred: \", e$message) }) #> An error occurred: Sum of column 'a' is too high. Current data:   a b #> 1 1 a #> 2 2 b #> 3 3 c"},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Coordinates of Specific Values in a data.frame — valueCoordinates","title":"Find Coordinates of Specific Values in a data.frame — valueCoordinates","text":"function locates row column coordinates values data.frame satisfy given condition. particularly useful identifying positions specific problematic values large datasets.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Coordinates of Specific Values in a data.frame — valueCoordinates","text":"","code":"valueCoordinates(df, value = NA, eq_fun = value_check)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Coordinates of Specific Values in a data.frame — valueCoordinates","text":"df data.frame searched. value value search . Default NA. eq_fun function used check equality. take two arguments: current value data.frame `value` parameter. Default internal `eq_fun` function uses `identical()` non-NA values `.na()` NA.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Coordinates of Specific Values in a data.frame — valueCoordinates","text":"data.frame two columns: column column numbers specified condition met row row numbers specified condition met returned data.frame sorted first column, row.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Coordinates of Specific Values in a data.frame — valueCoordinates","text":"function performs following steps: 1. Creates logical matrix TRUE indicates values meeting specified condition. 2. Finds row column indices TRUE values. 3. Combines indices data.frame. 4. Sorts results column, row. custom equality function provided, function uses internal `eq_fun` checks NA values `.na()` uses `identical()` values.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Coordinates of Specific Values in a data.frame — valueCoordinates","text":"","code":"# Create a sample data.frame df <- data.frame(   a = c(1, NA, 3),   b = c(NA, 2, NA),   c = c(3, 2, 1) )  # Find coordinates of NA values valueCoordinates(df) #>   column row #> 2      1   1 #> 1      2   2 #> 3      2   3  # Find coordinates of the value 2 valueCoordinates(df, 2) #>   column row #> 1      2   2 #> 2      3   2  # Find coordinates of values greater than 2 valueCoordinates(df, 2, function(x, y) x > y) #>   column row #> 2      1   1 #> 1      3   3  # Find coordinates of values within a range valueCoordinates(df, c(1, 3), function(x, y) x >= y[1] & x <= y[2]) #>   column row #> 1      1   1 #> 5      1   2 #> 3      2   2 #> 4      3   1 #> 2      3   3 #> 6      3   3"},{"path":"https://dereckmezquita.github.io/stenographer/reference/value_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Equality Function for valueCoordinates — value_check","title":"Default Equality Function for valueCoordinates — value_check","text":"helper function used default equality check valueCoordinates. handles NA values uses identical() non-NA comparisons.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/value_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Equality Function for valueCoordinates — value_check","text":"","code":"value_check(x, y)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/value_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Equality Function for valueCoordinates — value_check","text":"x current value data.frame y value compare (`value` parameter valueCoordinates)","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/value_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Equality Function for valueCoordinates — value_check","text":"Logical value indicating whether condition met","code":""}]
