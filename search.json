[{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to stenographer","title":"Contributing to stenographer","text":"Thank interest contributing stenographer!","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to stenographer","text":"Please read adhere Code Conduct.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to Contribute","title":"Contributing to stenographer","text":"Use clear, descriptive title. Provide detailed steps reproduce implement. Fill PR template. Include tests documentation. Improve documentation submitting PRs clarifications additions.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development Guidelines","title":"Contributing to stenographer","text":"Use 4 spaces indentation. Use box imports. Prefer base R functions avoid unnecessary dependencies. aim minimise external dependencies, including tidyverse packages. Write clear, efficient, maintainable code.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"commit-messages","dir":"","previous_headings":"","what":"Commit Messages","title":"Contributing to stenographer","text":"Use present tense (“Add feature”, “Added feature”) concise descriptive","code":""},{"path":"https://dereckmezquita.github.io/stenographer/CONTRIBUTING.html","id":"need-help","dir":"","previous_headings":"","what":"Need Help?","title":"Contributing to stenographer","text":"Check issues labeled good first issue help wanted. Thank contributing Logger!","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/donate.html","id":"support-my-work","dir":"Articles","previous_headings":"","what":"Support my work","title":"Donate","text":"find package useful, please consider supporting work cryptocurrency donation.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/donate.html","id":"bitcoin","dir":"Articles","previous_headings":"Support my work","what":"Bitcoin","title":"Donate","text":"bc1qgs4f6hhnzj8m2j05axgsf53k67kugps92qzr2k Copy","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/donate.html","id":"monero","dir":"Articles","previous_headings":"Support my work","what":"Monero","title":"Donate","text":"41wSUfpnhVUW5GnTKCyBBwVuokhkjMeepAVkKT1qv3HDhcZhTSQx1UaTaibEukndQrCPLVMcRt1LVFpVSq3YrdRjENBtMkG Copy","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with stenographer","text":"stenographer package provides flexible powerful logging system R applications. includes Stenographer class creating customisable loggers, well helper functions debugging error reporting. vignette guide basics using stenographer package demonstrate leverage features improve R workflows.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting started with stenographer","text":"can install released version stenographer CRAN: can install stenographer www.github.com/dereckmezquita/stenographer :","code":"install.packages(\"stenographer\") remotes::install_github(\"dereckmezquita/stenographer\")"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Getting started with stenographer","text":"First, let’s load package create basic stenographer:","code":"box::use(stenographer[Stenographer, LogLevel, messageParallel])  # Create a basic logger steno <- Stenographer$new()  # Log some messages steno$info(\"This is an informational message\") #> 2025-01-12T19:57:08.208Z INFO    This is an informational message steno$warn(\"This is a warning\") #> 2025-01-12T19:57:08.213Z WARNING This is a warning steno$error(\"This is an error\") #> 2025-01-12T19:57:08.249Z ERROR   This is an error"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"customising-the-stenographer","dir":"Articles","previous_headings":"","what":"Customising the Stenographer","title":"Getting started with stenographer","text":"can customise Stenographer specifying minimum log level, output file, custom print function:","code":"# Create a custom stenographer custom_steno <- Stenographer$new(     level = LogLevel$WARNING,     file_path = \"app.log\",     print_fn = message )  custom_steno$info(\"This won't be logged\") custom_steno$warn(\"This will be logged to console and file\") #> 2025-01-12T19:57:08.449Z WARNING This will be logged to console and file custom_steno$error(\"This is an error message\") #> 2025-01-12T19:57:08.451Z ERROR   This is an error message"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"logging-to-a-database","dir":"Articles","previous_headings":"","what":"Logging to a Database","title":"Getting started with stenographer","text":"Stenographer class supports logging SQLite database. ’s can set :","code":"box::use(RSQLite[ SQLite ]) box::use(DBI[ dbConnect, dbDisconnect, dbGetQuery ])  # Create a database connection db <- dbConnect(SQLite(), \"log.sqlite\")  # Create a Stenographer that logs to the database db_steno <- Stenographer$new(     db_conn = db,     table_name = \"app_logs\" )  # Log some messages db_steno$info(\"This is logged to the database\") #> 2025-01-12T19:57:08.720Z INFO    This is logged to the database db_steno$warn(\"This is a warning\", data = list(code = 101)) #> 2025-01-12T19:57:08.731Z WARNING This is a warning #> Data: #> { #>   \"code\": 101 #> } db_steno$error(\"An error occurred\", error = \"Division by zero\") #> 2025-01-12T19:57:08.845Z ERROR   An error occurred #> Error: #> \"Division by zero\"  # Example of querying the logs query <- \"SELECT * FROM app_logs WHERE level = 'ERROR'\" result <- dbGetQuery(db, query) print(result) #>   id                 datetime level context               msg data #> 1  3 2025-01-12T19:57:08.845Z ERROR    <NA> An error occurred <NA> #>                          error #> 1 [\"[\\\\\"Division by zero\\\\\"]\"]"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"using-context","dir":"Articles","previous_headings":"","what":"Using Context","title":"Getting started with stenographer","text":"Stenographer class supports context feature, allows add persistent information log entries:","code":"context_steno <- Stenographer$new(     db_conn = db,     table_name = \"context_logs\",     context = list(app_name = \"MyApp\", version = \"1.0.0\") )  context_steno$info(\"Application started\") #> 2025-01-12T19:57:08.928Z INFO    Application started #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"version\": \"1.0.0\" #> }  # Update context context_steno$update_context(list(user_id = \"12345\")) context_steno$info(\"User logged in\") #> 2025-01-12T19:57:08.939Z INFO    User logged in #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"version\": \"1.0.0\", #>   \"user_id\": \"12345\" #> }  # Log an error with context context_steno$error(\"Operation failed\", data = list(operation = \"data_fetch\")) #> 2025-01-12T19:57:08.949Z ERROR   Operation failed #> Data: #> { #>   \"operation\": \"data_fetch\" #> } #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"version\": \"1.0.0\", #>   \"user_id\": \"12345\" #> }  # Example of querying logs with context query <- \"SELECT * FROM context_logs WHERE json_extract(context, '$.user_id') = '12345'\" result <- dbGetQuery(db, query) print(result) #> [1] id       datetime level    context  msg      data     error    #> <0 rows> (or 0-length row.names)  # Clear context context_steno$clear_context() context_steno$info(\"Context cleared\") #> 2025-01-12T19:57:08.963Z INFO    Context cleared"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"combining-features","dir":"Articles","previous_headings":"","what":"Combining Features","title":"Getting started with stenographer","text":"can combine various features Stenographer class create powerful logging system:","code":"# Create a combined Stenographer combined_steno <- Stenographer$new(     level = LogLevel$INFO,     file_path = \"combined_app.log\",     db_conn = db,     table_name = \"combined_logs\",     context = list(app_name = \"CombinedApp\", version = \"2.0.0\"),     print_fn = messageParallel,     format_fn = function(level, msg) {         # manipulate the message before logging         msg <- gsub(\"API_KEY=[^\\\\s]+\", \"API_KEY=***\", msg)         return(paste(level, msg))     } )  # Log some messages combined_steno$info(\"Application started\") combined_steno$warn(\"Low memory\", data = list(available_mb = 100)) combined_steno$error(\"Database connection failed\", error = \"Connection timeout\")  # Update context combined_steno$update_context(list(user_id = \"67890\")) combined_steno$info(\"User action\", data = list(action = \"button_click\"))  # Example of a more complex query using context and data query <- \" SELECT * FROM combined_logs WHERE json_extract(context, '$.app_name') = 'CombinedApp'   AND json_extract(data, '$.available_mb') < 200 \" result <- dbGetQuery(db, query) print(result) #> [1] id       datetime level    context  msg      data     error    #> <0 rows> (or 0-length row.names)  # Don't forget to close the database connection when you're done dbDisconnect(db)"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"using-helper-functions","dir":"Articles","previous_headings":"","what":"Using Helper Functions","title":"Getting started with stenographer","text":"Stenographer package includes several helper functions can used conjunction Stenographer class provide detailed information logs. Let’s explore use functions effectively.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"finding-and-logging-data-issues","dir":"Articles","previous_headings":"Using Helper Functions","what":"Finding and Logging Data Issues","title":"Getting started with stenographer","text":"Suppose dataset problematic values, want log issues occur. can use valueCoordinates function locate problematic values include information log messages. produce log entry like:","code":"box::use(stenographer[valueCoordinates])  # Create a sample dataset with some issues df <- data.frame(     a = c(1, NA, 3, 4, 5),     b = c(2, 4, NA, 8, 10),     c = c(3, 6, 9, NA, 15) )  # Create a Stenographer steno <- Stenographer$new()  # Find coordinates of NA values na_coords <- valueCoordinates(df)  if (nrow(na_coords) > 0) {     steno$warn(         \"NA values found in the dataset\",         data = list(             na_locations = na_coords         )     ) } #> 2025-01-12T19:57:09.173Z WARNING NA values found in the dataset #> Data: #> { #>   \"na_locations\": [ #>     { #>       \"column\": 1, #>       \"row\": 2 #>     }, #>     { #>       \"column\": 2, #>       \"row\": 3 #>     }, #>     { #>       \"column\": 3, #>       \"row\": 4 #>     } #>   ] #> }"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"logging-errors-with-context","dir":"Articles","previous_headings":"Using Helper Functions","what":"Logging Errors with Context","title":"Getting started with stenographer","text":"error occurs, ’s often useful catch log just error message, also context error occurred. ’s example using Stenographer class helper functions:","code":"box::use(stenographer[tableToString])  steno <- Stenographer$new()  process_data <- function(df) {     tryCatch({         result <- df$a / df$b         if (any(is.infinite(result))) {             inf_coords <- valueCoordinates(data.frame(result), Inf)             steno$error(                 \"Division by zero occurred\",                 data = list(                     infinite_values = inf_coords,                     dataset_preview = tableToString(df)                 )             )             cat(\"Division by zero error\")         }         return(result)     }, error = function(e) {         steno$error(             paste(\"An error occurred while processing data:\", e$message),             data = list(dataset_preview = tableToString(df)),             error = e         )         cat(e)     }) }  # Test the function with problematic data df <- data.frame(a = c(1, 2, 3), b = c(0, 2, 0)) process_data(df) #> 2025-01-12T19:57:09.277Z ERROR   Division by zero occurred #> Data: #> { #>   \"infinite_values\": [ #>     { #>       \"column\": 1, #>       \"row\": 1 #>     }, #>     { #>       \"column\": 1, #>       \"row\": 3 #>     } #>   ], #>   \"dataset_preview\": \"  a b\\n1 1 0\\n2 2 2\\n3 3 0\" #> }  #> Division by zero error #> [1] Inf   1 Inf"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"logging-in-parallel-environments","dir":"Articles","previous_headings":"","what":"Logging in Parallel Environments","title":"Getting started with stenographer","text":"working parallel processing, standard logging functions might work expected. stenographer package provides messageParallel function ensure messages properly logged parallel processes: ensures messages parallel processes properly captured logged.","code":"box::use(future) box::use(future.apply[future_lapply])  steno <- Stenographer$new(print_fn = messageParallel)  future::plan(future::multisession, workers = 2)  result <- future_lapply(1:5, function(i) {     messageParallel(sprintf(\"Processing item %d\", i))     if (i == 3) {         steno$warn(sprintf(\"Warning for item %d\", i))     }     return(i * 2) })  future::plan(future::sequential)"},{"path":"https://dereckmezquita.github.io/stenographer/articles/getting-started-stenographer.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting started with stenographer","text":"stenographer package provides robust flexible logging system R applications. features like file logging, database logging, context management, can create informative context-rich log messages greatly aid debugging monitoring R scripts applications. Moreover, using helper functions like valueCoordinates tableToString can easily track log data issues errors, providing valuable information troubleshooting analysis. Remember adjust log level, output file, database settings, parameters suit specific needs. ability query logs using SQL, especially context-based filtering, makes easy analyze troubleshoot issues applications.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dereck Mezquita. Author, maintainer.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mezquita D (2025). stenographer: Flexible Customisable Logging System. R package version 1.0.0, https://github.com/dereckmezquita/stenographer.","code":"@Manual{,   title = {stenographer: Flexible and Customisable Logging System},   author = {Dereck Mezquita},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/dereckmezquita/stenographer}, }"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"stenographer-","dir":"","previous_headings":"","what":"Flexible and Customisable Logging System","title":"Flexible and Customisable Logging System","text":"stenographer package provides flexible logging framework hierarchical logging levels, database integration, contextual logging capabilities. includes support SQLite storage, colour-coded output, parallel processing support. latest version includes support SQLite database logging context management.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Flexible and Customisable Logging System","text":"can install released version stenographer CRAN: can install stenographer www.github.com/dereckmezquita/stenographer :","code":"install.packages(\"stenographer\") # install.packages(\"remotes\") remotes::install_github(\"derecksprojects/stenographer\")"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Flexible and Customisable Logging System","text":"’s quick example use stenographer:","code":"box::use(stenographer[Stenographer, LogLevel])  # Create a basic logger steno <- Stenographer$new()  # Log some messages steno$info(\"This is an informational message\") #> 2025-01-12T11:46:27.222Z INFO    This is an informational message steno$warn(\"This is a warning\") #> 2025-01-12T11:46:27.229Z WARNING This is a warning steno$error(\"This is an error\") #> 2025-01-12T11:46:27.252Z ERROR   This is an error"},{"path":[]},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"customisable-logging","dir":"","previous_headings":"Features","what":"Customisable Logging","title":"Flexible and Customisable Logging System","text":"can customise stenographer specifying minimum log level, output file, custom print function: Logs written specified file JSON objects:","code":"log_file <- tempfile(\"app_log\")  custom_steno <- Stenographer$new(     level = LogLevel$WARNING,     file_path = log_file,     print_fn = message )  custom_steno$info(\"This won't be logged\") custom_steno$warn(\"This will be logged to console and file\") #> 2025-01-12T11:46:27.378Z WARNING This will be logged to console and file custom_steno$error(\"This is an error message\", error = \"Some error\") #> 2025-01-12T11:46:27.398Z ERROR   This is an error message #> Error: #> \"Some error\" cat(readLines(log_file), sep = \"\\n\") #> {\"datetime\":\"2025-01-12T11:46:27.378Z\",\"level\":\"WARNING\",\"msg\":\"This will be logged to console and file\",\"data\":{},\"error\":{},\"context\":{}}  #> {\"datetime\":\"2025-01-12T11:46:27.398Z\",\"level\":\"ERROR\",\"msg\":\"This is an error message\",\"data\":{},\"error\":\"[\\\"Some error\\\"]\",\"context\":{}}"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"database-logging","dir":"","previous_headings":"Features","what":"Database Logging","title":"Flexible and Customisable Logging System","text":"stenographer now supports logging SQLite database context management can easily track application events. context useful filtering querying logs based specific criteria SQLite:","code":"box::use(RSQLite[ SQLite ]) box::use(DBI[ dbConnect, dbDisconnect, dbGetQuery ])  # Create a database connection db <- dbConnect(SQLite(), \"log.sqlite\")  # Create a stenographer that logs to the database db_steno <- Stenographer$new(     context = list(app_name = \"MyApp\", fun = \"main\"),     db_conn = db,     table_name = \"app_logs\" )  # Log some messages db_steno$info(\"This is logged to the database\") #> 2025-01-12T11:46:27.600Z INFO    This is logged to the database #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"fun\": \"main\" #> } db_steno$warn(\"This is a warning\", data = list(code = 101)) #> 2025-01-12T11:46:27.607Z WARNING This is a warning #> Data: #> { #>   \"code\": 101 #> } #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"fun\": \"main\" #> } db_steno$error(\"An error occurred\", error = \"Division by zero\") #> 2025-01-12T11:46:27.628Z ERROR   An error occurred #> Error: #> \"Division by zero\" #> Context: #> { #>   \"app_name\": \"MyApp\", #>   \"fun\": \"main\" #> }  # Example of querying the logs query <- \"SELECT * FROM app_logs WHERE level = 'ERROR'\" result <- dbGetQuery(db, query) print(result) #>   id                 datetime level                               context #> 1  3 2025-01-12T11:29:44.461Z ERROR {\"app_name\":[\"MyApp\"],\"fun\":[\"main\"]} #> 2  6 2025-01-12T11:30:05.059Z ERROR {\"app_name\":[\"MyApp\"],\"fun\":[\"main\"]} #> 3  9 2025-01-12T11:30:13.358Z ERROR {\"app_name\":[\"MyApp\"],\"fun\":[\"main\"]} #> 4 12 2025-01-12T11:30:34.129Z ERROR {\"app_name\":[\"MyApp\"],\"fun\":[\"main\"]} #> 5 15 2025-01-12T11:30:52.105Z ERROR {\"app_name\":[\"MyApp\"],\"fun\":[\"main\"]} #> 6 18 2025-01-12T11:46:27.628Z ERROR {\"app_name\":[\"MyApp\"],\"fun\":[\"main\"]} #>                 msg data                        error #> 1 An error occurred <NA> [\"[\\\\\"Division by zero\\\\\"]\"] #> 2 An error occurred <NA> [\"[\\\\\"Division by zero\\\\\"]\"] #> 3 An error occurred <NA> [\"[\\\\\"Division by zero\\\\\"]\"] #> 4 An error occurred <NA> [\"[\\\\\"Division by zero\\\\\"]\"] #> 5 An error occurred <NA> [\"[\\\\\"Division by zero\\\\\"]\"] #> 6 An error occurred <NA> [\"[\\\\\"Division by zero\\\\\"]\"]  # Don't forget to close the database connection when you're done dbDisconnect(db)"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"helper-functions","dir":"","previous_headings":"Features","what":"Helper Functions","title":"Flexible and Customisable Logging System","text":"Stenographer includes helper functions like valueCoordinates tableToString provide detailed context log messages:","code":"box::use(stenographer[valueCoordinates, tableToString])  # Create a sample dataset with some issues df <- data.frame(     a = c(1, NA, 3, 4, 5),     b = c(2, 4, NA, 8, 10),     c = c(3, 6, 9, NA, 15) )  # Find coordinates of NA values na_coords <- valueCoordinates(df)  if (nrow(na_coords) > 0) {     steno$warn(         \"NA values found in the dataset\",         data = list(             na_locations = na_coords,             dataset_preview = tableToString(df)         )     ) } #> 2025-01-12T11:46:27.643Z WARNING NA values found in the dataset #> Data: #> { #>   \"na_locations\": [ #>     { #>       \"column\": 1, #>       \"row\": 2 #>     }, #>     { #>       \"column\": 2, #>       \"row\": 3 #>     }, #>     { #>       \"column\": 3, #>       \"row\": 4 #>     } #>   ], #>   \"dataset_preview\": \"   a  b  c\\n1  1  2  3\\n2 NA  4  6\\n3  3 NA  9\\n4  4  8 NA\\n5  5 10 15\" #> }"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"error-logging-with-context","dir":"","previous_headings":"Features","what":"Error Logging with Context","title":"Flexible and Customisable Logging System","text":"stenographer makes easy log errors context:","code":"process_data <- function(df) {     tryCatch({         result <- df$a / df$b         if (any(is.infinite(result))) {             inf_coords <- valueCoordinates(data.frame(result), Inf)             steno$error(                 \"Division by zero occurred\",                 data = list(                     infinite_values = inf_coords,                     dataset_preview = tableToString(df)                 )             )             stop(\"Division by zero error\")         }         return(result)     }, error = function(e) {         steno$error(             paste(\"An error occurred while processing data:\", e$message),             data = list(dataset_preview = tableToString(df)),             error = e         )         stop(e)     }) }  # Test the function with problematic data df <- data.frame(a = c(1, 2, 3), b = c(0, 2, 0)) process_data(df) #> 2025-01-12T11:46:27.669Z ERROR   Division by zero occurred #> Data: #> { #>   \"infinite_values\": [ #>     { #>       \"column\": 1, #>       \"row\": 1 #>     }, #>     { #>       \"column\": 1, #>       \"row\": 3 #>     } #>   ], #>   \"dataset_preview\": \"  a b\\n1 1 0\\n2 2 2\\n3 3 0\" #> }  #> 2025-01-12T11:46:27.673Z ERROR   An error occurred while processing data: Division by zero error #> Data: #> { #>   \"dataset_preview\": \"  a b\\n1 1 0\\n2 2 2\\n3 3 0\" #> } #> Error: #> { #>   \"name\": \"simpleError\", #>   \"message\": \"Division by zero error\", #>   \"call\": \"doTryCatch(return(expr), name, parentenv, handler)\" #> } #> Error in doTryCatch(return(expr), name, parentenv, handler): Division by zero error"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"parallel-processing-support","dir":"","previous_headings":"Features","what":"Parallel Processing Support","title":"Flexible and Customisable Logging System","text":"stenographer provides support logging parallel environments:","code":"box::use(future) box::use(future.apply[future_lapply]) box::use(stenographer[messageParallel])  steno <- Stenographer$new(print_fn = messageParallel)  future::plan(future$multisession, workers = 2)  result <- future_lapply(1:5, function(i) {     messageParallel(sprintf(\"Processing item %d\", i))     if (i == 3) {         steno$warn(sprintf(\"Warning for item %d\", i))     }     return(i * 2) })  future::plan(future::sequential) #> Processing item 1 #> Processing item 2 #> Processing item 3 #> 2024-08-03T11:18:03.091Z WARNING Warning for item 3 #> Processing item 4 #> Processing item 5"},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Flexible and Customisable Logging System","text":"Contributions stenographer welcome! Please refer CONTRIBUTING.md file guidelines.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Flexible and Customisable Logging System","text":"stenographer released MIT License. See LICENSE file details.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/LogLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging Level — LogLevel","title":"Logging Level — LogLevel","text":"Defines standard logging levels controlling message output granularity. Use configuration `Stenographer` class control messages logged.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/LogLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging Level — LogLevel","text":"","code":"LogLevel"},{"path":"https://dereckmezquita.github.io/stenographer/reference/LogLevel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Logging Level — LogLevel","text":"list four integer elements: (-1) Disables logging ERROR (0) Logs errors WARNING (1) Logs errors warnings INFO (2) Logs messages","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/LogLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logging Level — LogLevel","text":"","code":"# Check logging levels LogLevel$OFF     # -1 #> [1] -1 LogLevel$ERROR   # 0 #> [1] 0 LogLevel$WARNING # 1 #> [1] 1 LogLevel$INFO    # 2 #> [1] 2"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Advanced Logging Functionality — Stenographer","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Provides flexible logging system support multiple output destinations, customisable formatting, contextual logging. Features include: * Multiple log levels (ERROR, WARNING, INFO) * File-based logging * Database logging support * Customisable message formatting * Contextual data attachment * Coloured console output","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Stenographer$new() Stenographer$set_level() Stenographer$update_context() Stenographer$clear_context() Stenographer$get_context() Stenographer$error() Stenographer$warn() Stenographer$info() Stenographer$clone()","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Create new Stenographer instance","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$new(   level = LogLevel$INFO,   file_path = NULL,   db_conn = NULL,   table_name = \"LOGS\",   print_fn = function(x) cat(x, \"\\n\"),   format_fn = function(level, msg) msg,   context = list() )"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"level minimum log level output. Default LogLevel$INFO. file_path Character; path file save log entries . Default NULL. db_conn DBI connection object; existing database connection. Default NULL. table_name Character; name table log database. Default \"LOGS\". print_fn Function; custom print function use console output. accept single character string input. Default uses cat newline. format_fn Function; custom format function modify log message. accept level msg inputs return formatted string. context List; initial context logger. Default empty list.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"new `Stenographer` object.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-set-level-","dir":"Reference","previous_headings":"","what":"Method set_level()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Update minimum logging level","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$set_level(level)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"level New log level (see `LogLevel`)","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-update-context-","dir":"Reference","previous_headings":"","what":"Method update_context()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Add update contextual data","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$update_context(new_context)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"new_context List context key-value pairs","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-clear-context-","dir":"Reference","previous_headings":"","what":"Method clear_context()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Remove contextual data","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$clear_context()"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-get-context-","dir":"Reference","previous_headings":"","what":"Method get_context()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Retrieve current context data","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$get_context()"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"List current context","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-error-","dir":"Reference","previous_headings":"","what":"Method error()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Log error message","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$error(msg, data = NULL, error = NULL)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"msg Error message text data Optional data attach error Optional error object","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-warn-","dir":"Reference","previous_headings":"","what":"Method warn()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Log warning message","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$warn(msg, data = NULL)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"msg Warning message text data Optional data attach","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-info-","dir":"Reference","previous_headings":"","what":"Method info()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"Log informational message","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$info(msg, data = NULL)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"msg Info message text data Optional data attach","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"objects class cloneable method.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"Stenographer$clone(deep = FALSE)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"deep Whether make deep clone.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/Stenographer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Advanced Logging Functionality — Stenographer","text":"","code":"# Create a basic Stenographer steno <- Stenographer$new() steno$info(\"This is an info message\") #> 2025-01-12T19:57:02.871Z INFO    This is an info message  steno$warn(\"This is a warning\") #> 2025-01-12T19:57:02.875Z WARNING This is a warning  steno$error(\"This is an error\") #> 2025-01-12T19:57:02.894Z ERROR   This is an error   # Disable all logging steno$set_level(LogLevel$OFF) steno$info(\"This won't be logged\") steno$warn(\"This won't be logged either\") steno$error(\"This also won't be logged\")  # Create a logger with custom settings, message formatting, and context custom_steno <- Stenographer$new(   level = LogLevel$WARNING,   file_path = tempfile(\"log_\"),   print_fn = function(x) message(paste0(\"Custom: \", x)),   format_fn = function(level, msg) paste0(\"Hello prefix: \", msg),   context = list(program = \"MyApp\") ) custom_steno$info(\"This won't be logged\") custom_steno$warn(\"This will be logged with a custom prefix\") #> Custom: 2025-01-12T19:57:02.900Z WARNING Hello prefix: This will be logged with a custom prefix #> Context: #> { #>   \"program\": \"MyApp\" #> }  # Change log level and update context custom_steno$set_level(LogLevel$INFO) custom_steno$update_context(list(user = \"John\")) custom_steno$info(\"Now this will be logged with a custom prefix and context\") #> Custom: 2025-01-12T19:57:02.903Z INFO    Hello prefix: Now this will be logged with a custom prefix and context #> Context: #> { #>   \"program\": \"MyApp\", #>   \"user\": \"John\" #> }"},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate Vector Elements with Optional Separator — collapse","title":"Concatenate Vector Elements with Optional Separator — collapse","text":"Concatenates vector elements single string. Unlike `paste0`, handles single-element vectors without adding trailing separator.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate Vector Elements with Optional Separator — collapse","text":"","code":"collapse(vector, collapse = \" \")"},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate Vector Elements with Optional Separator — collapse","text":"vector character vector concatenated collapse String use separator elements (default: \" \")","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate Vector Elements with Optional Separator — collapse","text":"character string containing concatenated elements","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate Vector Elements with Optional Separator — collapse","text":"","code":"# Multiple elements collapse(c(\"a\", \"b\", \"c\"), \", \")  # Returns \"a, b, c\" #> [1] \"a, b, c\"  # Single element - no trailing separator collapse(\"a\", \", \")  # Returns \"a\" #> [1] \"a\"  # With default separator collapse(c(\"Hello\", \"World\"))  # Returns \"Hello World\" #> [1] \"Hello World\"  # Empty vector collapse(character(0), \", \")  # Returns character(0) #> character(0)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Messages from Parallel Processes — messageParallel","title":"Print Messages from Parallel Processes — messageParallel","text":"Enables message output forked processes parallel computation using system's echo command. Primarily designed use `parallel` `future` `future.apply` parallel processing.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Messages from Parallel Processes — messageParallel","text":"","code":"messageParallel(...)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Messages from Parallel Processes — messageParallel","text":"... Arguments concatenated single character string printing","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Messages from Parallel Processes — messageParallel","text":"Invisible NULL, called side effect printing","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Print Messages from Parallel Processes — messageParallel","text":"function may significant resource overhead used frequently large amounts output. Use sparingly performance-critical code.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/messageParallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Messages from Parallel Processes — messageParallel","text":"","code":"# Basic usage messageParallel(\"Hello World\")  # Multiple arguments are concatenated messageParallel(\"Hello\", \" \", \"World\")  # \\donttest{ if (requireNamespace(\"future\", quietly = TRUE)) {   future::plan(future::multisession)   f <- future::future({     messageParallel(\"Message from parallel process\")   })   future::value(f)   future::plan(future::sequential) } # }"},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Data Frame or R Object to a String Representation — tableToString","title":"Convert a Data Frame or R Object to a String Representation — tableToString","text":"Captures printed output data.frame R object (coerced data.frame) single string preserved formatting. Useful error messages, logging, string-based output.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Data Frame or R Object to a String Representation — tableToString","text":"","code":"tableToString(obj)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Data Frame or R Object to a String Representation — tableToString","text":"obj R object can coerced data.frame","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Data Frame or R Object to a String Representation — tableToString","text":"character string containing formatted table output newlines","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/tableToString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Data Frame or R Object to a String Representation — tableToString","text":"","code":"# Basic usage with a data.frame df <- data.frame(   numbers = 1:3,   letters = c(\"a\", \"b\", \"c\") ) str_output <- tableToString(df) cat(str_output) #>   numbers letters #> 1       1       a #> 2       2       b #> 3       3       c  # Using in error messages df <- data.frame(value = c(10, 20, 30)) if (any(df$value > 25)) {   msg <- sprintf(     \"Values exceed threshold:\\n%s\",     tableToString(df)   )   message(msg) } #> Values exceed threshold: #>   value #> 1    10 #> 2    20 #> 3    30"},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate Specific Values in a Data Frame — valueCoordinates","title":"Locate Specific Values in a Data Frame — valueCoordinates","text":"Finds positions (row column indices) values data.frame match specified criteria. function useful locating particular values within large datasets.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate Specific Values in a Data Frame — valueCoordinates","text":"","code":"valueCoordinates(df, value = NA, eq_fun = value_check)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate Specific Values in a Data Frame — valueCoordinates","text":"df data.frame search value target value find (default: NA) eq_fun comparison function takes two parameters: current value data.frame target value. Returns TRUE matches. Default uses internal value_check function; handles NA values.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate Specific Values in a Data Frame — valueCoordinates","text":"data.frame two columns: column Column indices matches found row Row indices matches found Results sorted column, row.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/valueCoordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate Specific Values in a Data Frame — valueCoordinates","text":"","code":"# Sample data.frame df <- data.frame(   a = c(1, NA, 3),   b = c(NA, 2, NA),   c = c(3, 2, 1) )  # Find NA positions valueCoordinates(df) #>   column row #> 2      1   1 #> 1      2   2 #> 3      2   3  # Find positions of value 2 valueCoordinates(df, 2) #>   column row #> 1      2   2 #> 2      3   2  # Find positions where values exceed 2 valueCoordinates(df, 2, function(x, y) x > y) #>   column row #> 2      1   1 #> 1      3   3  # Find positions of values in range [1,3] valueCoordinates(df, c(1, 3), function(x, y) x >= y[1] & x <= y[2]) #>   column row #> 1      1   1 #> 5      1   2 #> 3      2   2 #> 4      3   1 #> 2      3   3 #> 6      3   3"},{"path":"https://dereckmezquita.github.io/stenographer/reference/value_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Equality Function for valueCoordinates — value_check","title":"Default Equality Function for valueCoordinates — value_check","text":"helper function performs equality checks values, special handling NA values.","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/value_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Equality Function for valueCoordinates — value_check","text":"","code":"value_check(x, y)"},{"path":"https://dereckmezquita.github.io/stenographer/reference/value_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Equality Function for valueCoordinates — value_check","text":"x value data frame searched y target value compare ","code":""},{"path":"https://dereckmezquita.github.io/stenographer/reference/value_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Equality Function for valueCoordinates — value_check","text":"logical value: TRUE values match according comparison rules,         FALSE otherwise","code":""}]
